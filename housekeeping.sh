#!/bin/bash
# Factory Automation Housekeeping Script
# Saves session context and cleans up temporary files
# Usage: ./housekeeping.sh [session_number]

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}╔════════════════════════════════════════════════════════════╗${NC}"
echo -e "${GREEN}║     Factory Automation - Housekeeping & Context Save      ║${NC}"
echo -e "${GREEN}╚════════════════════════════════════════════════════════════╝${NC}"
echo ""

# Get session number (optional parameter)
SESSION_NUM=${1:-""}
SESSION_DATE=$(date +"%Y-%m-%d")
SESSION_TIME=$(date +"%H:%M")

# Step 1: Create session report if it doesn't exist
echo -e "${YELLOW}📝 Creating session documentation...${NC}"

if [ -n "$SESSION_NUM" ]; then
    SESSION_FILE="docs/SESSION_${SESSION_NUM}_STATUS_$(date +%Y_%m_%d).md"
    
    if [ ! -f "$SESSION_FILE" ]; then
        cat > "$SESSION_FILE" << EOF
# Session $SESSION_NUM Status Report
**Date**: $SESSION_DATE  
**Time**: $SESSION_TIME  
**Focus**: [Add session focus here]

## 🎯 Session Objectives
- [Add objectives]

## ✅ Completed Tasks
- [Add completed items]

## 📁 Files Modified
- [List modified files]

## 🐛 Issues Resolved
- [List resolved issues]

## 📝 Next Steps
- [Add next steps]

---
*Session $SESSION_NUM completed*
EOF
        echo -e "${GREEN}✓ Created $SESSION_FILE${NC}"
    else
        echo -e "${GREEN}✓ Session file already exists: $SESSION_FILE${NC}"
    fi
fi

# Step 2: Update CLAUDE.md with current timestamp
echo -e "${YELLOW}📝 Updating CLAUDE.md with current status...${NC}"

# Update the "Last Updated" timestamp in CLAUDE.md
sed -i.bak "s/## Current Status (Last Updated: .*/## Current Status (Last Updated: $SESSION_DATE $SESSION_TIME)/" CLAUDE.md
rm -f CLAUDE.md.bak
echo -e "${GREEN}✓ Updated CLAUDE.md timestamp${NC}"

# Step 3: Create NEXT_SESSION_CONTEXT.md
echo -e "${YELLOW}📝 Creating next session context...${NC}"

cat > docs/NEXT_SESSION_CONTEXT.md << EOF
# Context for Next Session
**Last Session**: $SESSION_DATE at $SESSION_TIME

## Current Working State

### System Status
- Main application: \`python run_factory_automation.py\`
- Port: http://localhost:7860
- Required: OPENAI_API_KEY environment variable

### Recent Changes (Auto-detected)
$(git diff --name-status HEAD~1 2>/dev/null | head -10 || echo "No recent git changes")

### Test Commands
\`\`\`bash
# Activate environment
source .venv/bin/activate

# Set API key
export OPENAI_API_KEY='your-key-here'

# Run main application
python run_factory_automation.py
\`\`\`

### Active Development Files
$(ls -lt *.py 2>/dev/null | head -5 | awk '{print "- "$9}' || echo "No Python files in root")

### Documentation Updates
$(ls -lt docs/*.md 2>/dev/null | head -5 | awk '{print "- "$9}' || echo "No recent docs")

## Notes
[Session notes will be added here]

---
*Auto-generated by housekeeping.sh on $SESSION_DATE*
EOF

echo -e "${GREEN}✓ Created docs/NEXT_SESSION_CONTEXT.md${NC}"

# Step 4: Clean up test files (move to tests directory)
echo -e "${YELLOW}🧹 Organizing test files...${NC}"

TEST_FILES=$(ls test_*.py 2>/dev/null)
if [ -n "$TEST_FILES" ]; then
    mkdir -p factory_automation/factory_tests/session_tests
    for file in test_*.py; do
        if [ -f "$file" ]; then
            mv "$file" factory_automation/factory_tests/session_tests/
            echo -e "${GREEN}✓ Moved $file to tests directory${NC}"
        fi
    done
else
    echo "  No test files to move"
fi

# Step 5: Clean up temporary files
echo -e "${YELLOW}🧹 Cleaning temporary files...${NC}"

# Remove Python cache
find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null
find . -type f -name "*.pyc" -delete 2>/dev/null
echo -e "${GREEN}✓ Cleaned Python cache${NC}"

# Remove .DS_Store files (Mac)
find . -name ".DS_Store" -delete 2>/dev/null

# Clean up old log files (keep last 5)
if [ -d "logs" ]; then
    cd logs
    ls -t *.log 2>/dev/null | tail -n +6 | xargs rm -f 2>/dev/null
    cd ..
    echo -e "${GREEN}✓ Cleaned old log files${NC}"
fi

# Step 6: Git status check
echo -e "${YELLOW}📊 Git repository status...${NC}"

# Check for uncommitted changes
CHANGES=$(git status --porcelain 2>/dev/null | wc -l)
if [ "$CHANGES" -gt 0 ]; then
    echo -e "${YELLOW}⚠️  You have $CHANGES uncommitted changes:${NC}"
    git status --short
    echo ""
    echo -e "${YELLOW}Consider committing with:${NC}"
    echo "  git add ."
    echo "  git commit -m \"housekeeping: Session $SESSION_NUM - $SESSION_DATE\""
else
    echo -e "${GREEN}✓ No uncommitted changes${NC}"
fi

# Step 7: Create session summary
echo -e "${YELLOW}📊 Creating session summary...${NC}"

SUMMARY_FILE="docs/SESSION_SUMMARY_$(date +%Y%m%d_%H%M).txt"
cat > "$SUMMARY_FILE" << EOF
FACTORY AUTOMATION - SESSION SUMMARY
=====================================
Date: $SESSION_DATE
Time: $SESSION_TIME
Session: ${SESSION_NUM:-"N/A"}

FILES MODIFIED TODAY:
$(find . -type f -name "*.py" -mtime -1 -not -path "./.venv/*" -not -path "*/__pycache__/*" | head -20)

DOCUMENTATION UPDATED:
$(find docs -type f -name "*.md" -mtime -1 | head -10)

CURRENT DIRECTORY STRUCTURE:
$(tree -L 2 -I '__pycache__|.venv|.git|*.pyc' 2>/dev/null | head -30 || ls -la | head -20)

ENVIRONMENT INFO:
- Python: $(python --version 2>&1)
- Pip packages: $(pip list | wc -l) packages installed
- Virtual env: $(if [ -d ".venv" ]; then echo "Active"; else echo "Not found"; fi)

DISK USAGE:
$(du -sh . 2>/dev/null || echo "Unable to calculate")

CHROMADB STATUS:
$(if [ -d "chroma_data" ]; then du -sh chroma_data; else echo "Not found"; fi)

LAST 5 COMMITS:
$(git log --oneline -5 2>/dev/null || echo "Not a git repository")

TODO ITEMS:
$(grep -r "TODO" --include="*.py" . 2>/dev/null | head -5 || echo "No TODOs found")

=====================================
Generated: $(date)
EOF

echo -e "${GREEN}✓ Created $SUMMARY_FILE${NC}"

# Step 8: Check critical files exist
echo -e "${YELLOW}🔍 Verifying critical files...${NC}"

CRITICAL_FILES=(
    "run_factory_automation.py"
    "CLAUDE.md"
    "config.yaml"
    ".env.example"
    "factory_automation/factory_agents/orchestrator_v3_agentic.py"
    "factory_automation/factory_agents/order_processor_agent.py"
)

for file in "${CRITICAL_FILES[@]}"; do
    if [ -f "$file" ]; then
        echo -e "${GREEN}✓ $file${NC}"
    else
        echo -e "${RED}✗ $file missing!${NC}"
    fi
done

# Step 9: Create compact archive (optional)
echo -e "${YELLOW}📦 Creating backup archive...${NC}"

BACKUP_DIR="backups"
mkdir -p "$BACKUP_DIR"
BACKUP_FILE="$BACKUP_DIR/factory_backup_$(date +%Y%m%d_%H%M).tar.gz"

# Create archive excluding large/unnecessary directories
tar -czf "$BACKUP_FILE" \
    --exclude=".venv" \
    --exclude="__pycache__" \
    --exclude=".git" \
    --exclude="chroma_data" \
    --exclude="backups" \
    --exclude="*.pyc" \
    --exclude=".DS_Store" \
    . 2>/dev/null

if [ -f "$BACKUP_FILE" ]; then
    SIZE=$(du -h "$BACKUP_FILE" | cut -f1)
    echo -e "${GREEN}✓ Created backup: $BACKUP_FILE ($SIZE)${NC}"
else
    echo -e "${RED}✗ Failed to create backup${NC}"
fi

# Step 10: Final summary
echo ""
echo -e "${GREEN}╔════════════════════════════════════════════════════════════╗${NC}"
echo -e "${GREEN}║                  Housekeeping Complete!                   ║${NC}"
echo -e "${GREEN}╚════════════════════════════════════════════════════════════╝${NC}"
echo ""
echo "📊 Summary:"
echo "  • Session docs created/updated"
echo "  • Test files organized"
echo "  • Temporary files cleaned"
echo "  • Backup created in $BACKUP_DIR"
echo "  • Git status checked"
echo ""
echo "📝 Next steps:"
echo "  1. Review docs/NEXT_SESSION_CONTEXT.md"
echo "  2. Commit changes if needed"
echo "  3. Run 'source .venv/bin/activate' to continue development"
echo ""
echo -e "${GREEN}Ready for next session or context reset!${NC}"